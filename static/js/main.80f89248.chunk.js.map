{"version":3,"sources":["logo.svg","pages/randomUserPage/index.jsx","pages/productPages/styled.js","pages/productPages/index.jsx","yandex/components/body/styles.js","yandex/components/body/index.jsx","yandex/components/navbar/styles.js","yandex/components/navbar/index.jsx","yandex/pages/style.js","yandex/pages/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["Random","styled","div","form","open","ProductPages","Wrap","Card1","Textarea","textarea","Select","select","Card2","TranslateWordBox","TranslateWord","span","TranslateWordPronunciation","Pos","small","Gen","TranslatedWord","Number","Tr","Syn","Mean","Example","Comma","MinusSign","Body","useState","setinput","Language","setLanguage","start","e","preventDefault","lang","document","getElementById","value","console","log","axios","get","then","res","data","def","useEffect","rows","id","onChange","type","name","placeholder","map","text","pos","tr","ts","trIndex","gen","syn","mean","ex","length","synIndex","meanIndex","Navbarwrap","Navbar","Container","PageYandex","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.80f89248.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nfunction Random() {\r\n\r\n    const [person, setperson] = useState([])\r\n    const getPerson = () => {\r\n        axios.get(\"https://randomuser.me/api/\")\r\n            .then((res) => {\r\n                setperson(res.data.results)\r\n                console.log(res.data.results);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n    }\r\n    useEffect(() => {\r\n        getPerson()\r\n    }, [])\r\n    return (\r\n        <div>\r\n            {/* {\r\n                person?.map(({street, gender, name, location:{street}, email, phone, cell, picture }, index) => (\r\n                    <>\r\n                        <p>{gender}</p>\r\n                        <div>{name?.title} {name?.first} {name?.last}</div>\r\n                        <p>{street.name}</p>\r\n                        <p>{street.number}</p>\r\n                    </>\r\n                ))\r\n            } */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Random\r\n","import styled from \"styled-components\";\r\nexport const ProductCards=styled.div`\r\ndisplay: flex;\r\nflex-wrap: wrap;\r\nwidth: 1200px;\r\nmargin: auto;\r\nmargin-top: 20px;\r\njustify-content: space-between;\r\n`\r\nexport const Card=styled.div`\r\nwidth: 30%;\r\nborder-radius: 10px;\r\npadding: 10px;\r\nmargin-bottom: 20px;\r\ntext-transform: capitalize;\r\nbackground: lightskyblue;\r\n\r\np{\r\n    word-wrap: break-word;\r\n}\r\n.red{\r\n    background: red;\r\n    color: white;\r\n}\r\nbutton{\r\n    cursor: pointer;\r\n    padding: 10px;\r\n    border: 0;\r\n    display: block;\r\n    width: 100%;\r\n    \r\n    background: lightgreen;\r\n}\r\n`\r\nexport const Form=styled.form`\r\nwidth: 400px;\r\nmargin: auto;\r\ndisplay:  ${({ open }) => open ? \"block\" : \"none\"};\r\npadding: 10px;\r\nbackground: lightgreen;\r\nmargin-top: 20px;\r\ninput{\r\n    width: 100%;\r\n    display: block;\r\n    padding: 10px;\r\n    margin: 10px 0;\r\n}\r\ntextarea{\r\n    padding: 10px;\r\n    width: 100%;\r\n    margin: 10px 0;\r\n}\r\nbutton{\r\n    cursor: pointer;\r\npadding: 10px;\r\nmargin: 10px 0;\r\nwidth: 100%;\r\nbackground: lightsalmon;\r\ncolor: white;\r\nborder: 0;\r\n}\r\n`\r\n\r\n","import axios from 'axios'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Card, Form, ProductCards } from './styled'\r\n\r\nfunction ProductPages() {\r\n        const [open, setOpen] = useState(true)\r\n    const [saleProduct, setsaleProduct] = useState([])\r\n    const [update, setupdate] = useState({ edit: false, data: {} })\r\n    const getProducts = () => {\r\n        axios.get(\"https://ibs-school.herokuapp.com/api/v1/for-developer/product\")\r\n            .then((res) => {\r\n                setsaleProduct(res.data)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            })\r\n    }\r\n    useEffect(() => {\r\n        getProducts()\r\n    }, [])\r\n    const submitForm = (e) => {\r\n        e.preventDefault()\r\n        const { name, price, description } = e.target\r\n        const form = {\r\n            name: name.value,\r\n            price: price.value,\r\n            description: description.value,\r\n        }\r\n        axios.post(\"https://ibs-school.herokuapp.com/api/v1/for-developer/product\", form)\r\n            .then((res) => {\r\n                console.log(\"submited successfully\");\r\n                getProducts();\r\n                e.target.reset();\r\n            })\r\n            .catch()\r\n\r\n    }\r\n    const deleteProduct = (id) => {\r\n        axios.delete(\"https://ibs-school.herokuapp.com/api/v1/for-developer/product/\" + id)\r\n\r\n            .finally(() => {\r\n                getProducts()\r\n            })\r\n    }\r\n    const updateform = (e) => {\r\n        e.preventDefault()\r\n        const { name, price, description } = e.target\r\n        const form = {\r\n            name: name.value,\r\n            price: price.value,\r\n            description: description.value,\r\n        }\r\n        axios.put(\"https://ibs-school.herokuapp.com/api/v1/for-developer/product/\" +update.data.id,form)\r\n            .then((res)=>{\r\n                console.log(res.data);\r\n                getProducts();\r\n                e.target.reset();\r\n                setupdate({edit:false,data:{}})\r\n            })\r\n    }\r\n    return (\r\n        <>\r\n        <button\r\n        onClick={() => {\r\n          setOpen(!open);\r\n        }}\r\n      >\r\n        toggle\r\n      </button>\r\n            <Form open={open} onSubmit={update.edit ? updateform : submitForm}>\r\n                <input defaultValue={update.edit ? update.data.name : \"\"} type=\"text\" name=\"name\" placeholder=\"Name\" required />\r\n\r\n                <input defaultValue={update.edit ? update.data.price : \"\"} type=\"number\" name=\"price\" placeholder=\"Price\" required />\r\n\r\n                <textarea defaultValue={update.edit ? update.data.description : \"\"} name=\"description\" rows=\"5\" placeholder=\"Description\" />\r\n                <button>\r\n                    {update.edit ? \"update\" : \"submit\"}\r\n                </button>\r\n            </Form>\r\n            <ProductCards>\r\n                {saleProduct?.map(({ id, name, price, description }) => (\r\n                    <Card key={id}>\r\n                        <p>Product Name : {name}</p>\r\n                        <p>Product price : ${price}</p>\r\n                        <p> description :{description}</p>\r\n                        <button onClick={() => deleteProduct(id)} className=\"red\">Delete</button>\r\n                        <br />\r\n                        <button onClick={() => { setupdate({ edit: true, data: { id, name, price, description } }) }}>Update</button>\r\n                    </Card>\r\n                ))}\r\n\r\n            </ProductCards>\r\n        </>\r\n    )\r\n}\r\nexport default ProductPages;","import styled from \"styled-components\";\r\n\r\nexport const Wrap=styled.div`\r\nwidth: 1200px;\r\nmargin: auto;\r\nposition: relative;\r\nmargin-top: 20px;\r\n/* display: flex; */\r\n`\r\nexport const Card1=styled.div`\r\nwidth: 48%;\r\n\r\nposition: relative;\r\nborder: 1px solid lightgrey;\r\n&:focus-within{\r\noutline: 1px auto yellowgreen;\r\n}\r\n@media only screen and (max-width: 768px){\r\n     position: relative;\r\nwidth: 48%;\r\n\r\n}\r\n@media only screen and (max-width: 425px){\r\n    position: relative;\r\nwidth: 48%;\r\n\r\n} \r\n`\r\nexport const Textarea=styled.textarea`\r\n    width: 100%;\r\n    position: relative;\r\n    height: 200px;\r\n    border: 0;\r\n    padding: 60px 20px;\r\n    &:focus-within{\r\noutline: 1px auto yellow;\r\n}\r\n    &:focus{\r\noutline: 0;\r\n}\r\n&::placeholder{\r\nfont-size: 20px;\r\n}\r\n\r\nresize: none;\r\n @media only screen and (max-width: 768px){\r\n     position: relative;\r\nfont-size: 18px;\r\n&::placeholder{\r\nfont-size: 18px;\r\n}\r\n}\r\n@media only screen and (max-width: 425px){\r\n    position: relative;\r\nfont-size: 15px;\r\n&::placeholder{\r\nfont-size: 15px;\r\n}\r\n} \r\n`\r\nexport const Select=styled.select`\r\n   position: absolute;\r\n    top: 10px;\r\n    left: 10px;\r\n    padding: 10px;\r\n    option{\r\n        margin-top: 10px;\r\n    }\r\n    @media only screen and (max-width: 768px){\r\n        position: absolute;\r\n        width: 150px;\r\n    padding: 0;\r\n    height: 30px;\r\n        top: 10px;\r\n    left: 10px;\r\n\r\n}\r\n@media only screen and (max-width: 425px){\r\n    width: 150px;\r\n    padding: 0;\r\n    height: 30px;\r\n    position: absolute;\r\n    top: 10px;\r\n    left: 10px;\r\n\r\n}\r\n@media only screen and (max-width: 385px){\r\n    width: 120px;\r\n    margin-top: 5px;\r\n    padding: 0;\r\n    height: 30px;\r\n    position: absolute;\r\n    top: 10px;\r\n    left: 10px;\r\n\r\n}\r\n\r\n` \r\nexport const Card2=styled.div`\r\nwidth: 48%;\r\nmargin-left: 10px;\r\nposition: absolute;\r\nleft: 50%;\r\ntop: 0;\r\n`\r\n\r\nexport const TranslateColWrapper = styled.div`\r\nwidth: 100%;\r\n`;\r\n\r\nexport const TranslateWordBox = styled.div`\r\n//display: flex;\r\n`;\r\n\r\nexport const TranslateWord = styled.span`\r\nfont-weight:bold;\r\n`;\r\n\r\nexport const TranslateWordPronunciation = styled.span`\r\nmargin: 0 5px;\r\ncolor: darkgrey;\r\n`;\r\n\r\nexport const Pos = styled.small`\r\ncolor: grey;\r\n`;\r\n\r\nexport const Gen = styled.small`\r\ncolor: grey;\r\nmargin-left: 5px;\r\n`;\r\n\r\nexport const TranslatedWord = styled.div`\r\ndisplay: flex;\r\nflex-wrap: wrap;\r\npadding-left: 25px;\r\nposition: relative;\r\n`;\r\n\r\nexport const Number=styled.div`\r\nposition: absolute;\r\ntop: 0;\r\nleft: 0;\r\n\r\ncolor: darkgrey;\r\n`;\r\n\r\n\r\nexport const Tr = styled.div`\r\nmargin-right: 5px;\r\ncolor: #4b4b99;\r\n\r\n`;\r\n\r\nexport const Syn = styled.div`\r\nmargin-right: 5px;\r\ncolor: #4b4b99;\r\n\r\n\r\n`;\r\n\r\n\r\nexport const Mean = styled.div`\r\ncolor: #80494b;\r\n//margin:5px 0 5px 25px;\r\nmargin-left: 25px;\r\n`;\r\n\r\nexport const Example = styled.div`\r\ncolor: grey;\r\nmargin-left: 40px;\r\n\r\n\r\n`;\r\n\r\nexport const Comma = styled.span`\r\ncolor: black;\r\n`;\r\n\r\nexport const MinusSign = styled.span`\r\nmargin: 0 5px;\r\n`;\r\n","import axios from 'axios'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Card1, Card2, Comma, Example, Gen, Mean, MinusSign, Number, Pos, Select, Syn, Textarea, Tr, TranslateColWrapper, TranslatedWord, TranslateWord, TranslateWordBox, TranslateWordPronunciation, Wrap } from './styles'\r\n\r\nfunction Body() {\r\n    const [input, setinput] = useState([])\r\n    const [Language, setLanguage] = useState([])\r\n    // const getLanguages = (e) => {\r\n    //     const lang = document.getElementById(\"select\").value;\r\n    //     axios.get(\"https://dictionary.yandex.net/api/v1/dicservice.json/lookup?key=dict.1.1.20210915T143839Z.96e17f7f60ad28d4.e1bf52d3b734ee95be20a7e82dfe268e2601fce7&lang=\" + lang)\r\n    //         .then((res) => {\r\n    //             console.log(res.data);\r\n    //         })\r\n    // }\r\n    const start = (e) => {\r\n\r\n        e.preventDefault()\r\n          \r\n        const lang = document.getElementById(\"select\").value;\r\n        console.log(lang);\r\n        const form = document.getElementById(\"text\").value ;\r\n        axios.get(`https://dictionary.yandex.net/api/v1/dicservice.json/lookup?key=dict.1.1.20210915T143839Z.96e17f7f60ad28d4.e1bf52d3b734ee95be20a7e82dfe268e2601fce7&lang=${lang}&text=${form}`)\r\n            .then((res) => {\r\n\r\n                console.log(res.data.def);\r\n                setLanguage(res.data.def)\r\n                setinput(res.data.def)\r\n\r\n            })\r\n    }\r\n    useEffect(() => {\r\n        // getLanguages()\r\n\r\n    }, [])\r\n    return (\r\n        <Wrap>\r\n            <Card1>\r\n                <Textarea rows={4} id=\"text\" onChange={start} type=\"text\" name=\"names\" placeholder=\"Type something to translate\" />\r\n                <Select id=\"select\" onChange={start}>\r\n                    <option value=\"ru-ru\">Russian ➞ Russian </option>\r\n                    <option value=\"ru-en\">Russian ➞ English </option>\r\n                    <option value=\"ru-pl\">Russian ➞ Polandish </option>\r\n                    <option value=\"ru-uk\">Russian ➞ Ukrainian </option>\r\n                    <option value=\"ru-de\">Russian ➞ German </option>\r\n                    <option value=\"ru-fr\">Russian ➞ French </option>\r\n                    <option value=\"ru-es\">Russian ➞ Spanish </option>\r\n                    <option value=\"ru-it\">Russian ➞ Italian </option>\r\n                    <option value=\"ru-tr\">Russian ➞ Turkish </option>\r\n                    <option value=\"en-ru\">English ➞ Russian </option>\r\n                    <option value=\"en-en\">English ➞ English </option>\r\n                    <option value=\"en-de\">English ➞ German </option>\r\n                    <option value=\"en-fr\">English ➞ French </option>\r\n                    <option value=\"en-es\">English ➞ Spanish </option>\r\n                    <option value=\"en-it\">English ➞ Italian </option>\r\n                    <option value=\"en-tr\">English ➞ Turkish </option>\r\n                    <option value=\"pl-ru\">Polandish ➞ Russian </option>\r\n                    <option value=\"uk-ru\">Ukrainian ➞ Russian </option>\r\n                    <option value=\"de-ru\">German ➞ Russian </option>\r\n                    <option value=\"de-en\">German ➞ English </option>\r\n                    <option value=\"fr-ru\">French ➞ Russian </option>\r\n                    <option value=\"fr-en\">French ➞ English </option>\r\n                    <option value=\"es-ru\">Spanish ➞ Russian </option>\r\n                    <option value=\"es-en\">Spanish ➞ English </option>\r\n                    <option value=\"it-ru\">Italian ➞ Russian </option>\r\n                    <option value=\"it-en\">Italian ➞ English </option>\r\n                    <option value=\"tr-ru\">Turkish ➞ Russian </option>\r\n                    <option value=\"tr-en\">Turkish ➞ English </option>\r\n                </Select>\r\n            </Card1>\r\n            <Card2>\r\n                {\r\n\r\n                    Language?.map(({text,pos,tr,ts}) => (\r\n                        <>\r\n                        \r\n                        <TranslateWordBox>\r\n                            <TranslateWord>\r\n                                {text}\r\n                            </TranslateWord>\r\n                            <TranslateWordPronunciation>\r\n                                [{ts}]\r\n                            </TranslateWordPronunciation>\r\n                            <Pos>\r\n                                {pos}\r\n                            </Pos>\r\n                        </TranslateWordBox>\r\n\r\n                        {tr?.map(({text, pos, gen, syn, mean, ex}, trIndex) =>\r\n                            <>\r\n                                <TranslatedWord>\r\n                                    {tr.length>1 &&\r\n                                        <Number>\r\n                                            {trIndex + 1}\r\n                                        </Number>\r\n                                    }\r\n                                    <Tr>\r\n                                        {text}\r\n                                        {gen && <Gen>\r\n                                            {gen}\r\n                                        </Gen>}\r\n                                        <Comma>\r\n                                            {syn ? \",\" : ''}\r\n                                        </Comma>\r\n                                    </Tr>\r\n\r\n                                    {syn?.map(({text, pos, gen}, synIndex) =>\r\n                                        <Syn>\r\n                                            {text}\r\n                                            {gen &&\r\n                                            <Gen>\r\n                                                {gen}\r\n                                            </Gen>}\r\n                                            <Comma>\r\n                                                {syn.length - 1 !== synIndex ? \",\" : ''}\r\n                                            </Comma>\r\n                                        </Syn>\r\n                                    )}\r\n\r\n                                </TranslatedWord>\r\n                                {mean &&\r\n                                <Mean>\r\n                                    ({mean.map(({text},meanIndex) => <span>{text}{mean.length-1!==meanIndex && \" \"}</span>)})\r\n                                </Mean>\r\n                                }\r\n\r\n                                {ex &&\r\n                                <Example>\r\n                                    {ex.map(({text,tr}) =>\r\n                                        <div>\r\n                                            {text}\r\n                                            <MinusSign>-</MinusSign>\r\n                                            {tr && tr.map(({text})=><span>{text}</span>)}\r\n                                        </div>\r\n                                    )}\r\n                                </Example>\r\n                                }\r\n\r\n\r\n                            </>\r\n                        )}\r\n\r\n                        <Example>\r\n\r\n                        </Example>\r\n                    </>\r\n                        // <div>\r\n                        //    <div>\r\n                        //        {tr.text}\r\n                        //    </div>\r\n                           \r\n                        //     {tr?.map(({text},trIndex)=>{\r\n                        //         console.log(text);\r\n                        //             <>\r\n                        //             <div>{tr.length>1 &&\r\n                        //             <p>\r\n                        //                 {trIndex+1}\r\n                        //             </p>}</div>\r\n                                        \r\n                                        \r\n                        //                <p>{text}</p> \r\n                                   \r\n                                    \r\n                        //             </>\r\n                        //         })\r\n                        //     }\r\n                        // </div>\r\n                    ))\r\n                }\r\n                \r\n\r\n\r\n\r\n            </Card2>\r\n        </Wrap>\r\n    )\r\n}\r\n\r\nexport default Body\r\n","import styled from \"styled-components\";\r\n\r\nexport const Navbarwrap=styled.div`\r\nwidth: 100%;\r\nfont-size: 50px;\r\ntext-align: center;\r\ncolor: red;\r\nbackground: lightgreen;\r\npadding: 20px;\r\n@media only screen and (max-width: 942px){\r\nfont-size: 50px;\r\npadding: 25px 0;\r\n}\r\n@media only screen and (max-width: 768px){\r\nfont-size: 40px;\r\npadding: 20px 0;\r\n}\r\n@media only screen and (max-width: 425px){\r\nfont-size: 30px;\r\npadding: 10px 0;\r\n}\r\n`","import React from 'react'\r\nimport { Navbarwrap } from './styles'\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <Navbarwrap>\r\n            Yandex dictionary\r\n        </Navbarwrap>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import styled from \"styled-components\"\r\n\r\nexport const Container = styled.div`\r\nwidth: 1140px;\r\nmargin: auto;\r\npadding: 50px 0;\r\ndisplay:flex;\r\njustify-content: center;\r\nflex-wrap: wrap;\r\n@media only screen and (max-width: 1200px){\r\nwidth: 90%;\r\n}\r\n`","import React from 'react'\r\nimport Body from '../components/body'\r\nimport Navbar from '../components/navbar'\r\nimport { Container } from './style'\r\n\r\nfunction PageYandex() {\r\n    return (\r\n        <div>\r\n            <Navbar/>\r\n            <Container>\r\n            <Body/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageYandex\r\n","import logo from './logo.svg';\nimport './App.css';\nimport Random from './pages/randomUserPage';\nimport ProductPages from './pages/productPages';\nimport PageYandex from './yandex/pages';\n\nfunction App() {\n  return (\n  <div>\n    {/* <Random/> */}\n    {/* <ProductPages/> */}\n    <PageYandex/>\n  </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}